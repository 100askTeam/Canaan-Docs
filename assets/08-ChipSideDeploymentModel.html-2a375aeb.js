import{_ as e,o as t,c as d,e as a}from"./app-93907a86.js";const o={},p=a(`<h1 id="_7-芯片端侧部署模型" tabindex="-1"><a class="header-anchor" href="#_7-芯片端侧部署模型" aria-hidden="true">#</a> 7.芯片端侧部署模型</h1><h2 id="_7-1-部署资源包组成" tabindex="-1"><a class="header-anchor" href="#_7-1-部署资源包组成" aria-hidden="true">#</a> 7.1 部署资源包组成</h2><p>打开本地工程路径，在工程路径下可以看到deploy_source.zip压缩包，将其解压可以看到example_code、excute_demo_on_k510、project三个文件夹，如图7-1所示。</p><p><img src="http://photos.100ask.net/canaan-docs/image-20240522175424212.png" alt="image-20240522175424212"></p><p>图7-1 部署资源包内容</p><p>其中example_code中保存了芯片端部署需要的code资源，excute_demo_on_k510文件夹中保存了在k510芯片端使用的示例demo，project目录中保存了用户本次工程导出的模型及模型配置文件。用户可以按照需要在芯片端使用deployment_source资源。</p><h2 id="_7-2-工程模型资源" tabindex="-1"><a class="header-anchor" href="#_7-2-工程模型资源" aria-hidden="true">#</a> 7.2 工程模型资源</h2><p>在图7-1中的project目录下保存着以工程名命名的文件夹，该文件夹中导出模型及配置参数。在芯片端使用的模型都会以kmodel作为文件结尾，打开模型配置参数文件deploy_config.json，可以看到如下字段，如图7-2所示。</p><p><img src="http://photos.100ask.net/canaan-docs/image-20240522175444589.png" alt="image-20240522175444589"></p><p>图7-2 模型参数配置文件</p><p>在该文件中保存的参数与用户在AI Matrix中设置的参数一致。配置文件中各key值含义间表7-1。</p><table><thead><tr><th>Key值</th><th>Key值含义</th></tr></thead><tbody><tr><td>chip_type</td><td>芯片型号</td></tr><tr><td>inference_width</td><td>推理宽度</td></tr><tr><td>inference_height</td><td>推理高度</td></tr><tr><td>confidence_threshold</td><td>置信度阈值</td></tr><tr><td>export_kmodel_name</td><td>被导出模型名称</td></tr><tr><td>model_type</td><td>模型结构</td></tr><tr><td>img_size</td><td>训练时图像尺寸</td></tr><tr><td>mean</td><td>训练时均值</td></tr><tr><td>std</td><td>训练时标准差</td></tr><tr><td>categories</td><td>数据集类别</td></tr><tr><td>kmodel_path</td><td>导出后模型名称</td></tr><tr><td>num_classes</td><td>数据集类别数量</td></tr></tbody></table><p>表7-1 deploy_config.json key值含义</p><p>用户在使用AI Matrix导出模型后，在芯片端使用该文件时可以按照实际需求更改文件内容，一般不推荐用户更改该文件。</p><h2 id="_7-3-芯片端可执行demo" tabindex="-1"><a class="header-anchor" href="#_7-3-芯片端可执行demo" aria-hidden="true">#</a> 7.3 芯片端可执行demo</h2><p>模型导出后，用户可以直接在K510芯片端推理模型，所用到的文件资源是deployment_source文件夹中的excute_demo_on_k510文件夹，该文件夹中保存着芯片端可执行二进制文件、开发板摄像头配置文件和readme文件。如图7-3所示。</p><p><img src="http://photos.100ask.net/canaan-docs/image-20240522175459192.png" alt="image-20240522175459192"></p><p>图7-4 芯片端可执行demo文件</p><p>在使用该demo文件前需要先将project目录下的kmodel文件及模型参数配置json文件拷贝到demo同级目录下。</p><p>1、在使用时，如果是芯片端静态图推理，则在芯片控制台运行如下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./demo deploy_config.json 1 test.jpg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，参数1代表本地静态图片推理；参数test.jpg为推理图片名称，用户可以根据实际情况对其更改。</p><p>2、如果使用芯片摄像头推理，则在芯片控制台运行如下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./demo deploy_config.json 2 video.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，参数2代表使用摄像头模组进行推理；video.conf为摄像头模组配置文件。</p><h2 id="_7-4-芯片端部署code" tabindex="-1"><a class="header-anchor" href="#_7-4-芯片端部署code" aria-hidden="true">#</a> 7.4 芯片端部署code</h2><p>example_code文件夹中存放的是芯片端推理的参考代码，其中cmake为编译时所需的cmake示例文件；common目录中包含K510 CRB开发板中摄像头、屏幕操作头文件；demo_code文件夹中存放的是与平台适配的C++ code,用户可以通过修改编译代码，重新生成demo可执行文件；jsoncpp为读取json文件所用的库文件；build sh为编译脚本；CMakeLists txt为CMake编译时所需要的配置文件。如图7-5所示。</p><p><img src="http://photos.100ask.net/canaan-docs/image-20240522175536361.png" alt="image-20240522175536361"></p><p>图7-5 芯片端部署文件目录</p><p>其中，最重要的是demo_code文件夹，该文件夹中包含深度学习模型推理流程代码，打开main.cpp文件，main函数中包含有静态图推理和摄像头推理两个分支，分别由used==1和used==2控制，如图7-6所示。</p><p><img src="http://photos.100ask.net/canaan-docs/image-20240522175545891.png" alt="image-20240522175545891"></p><p>图7-6 静态图推理/摄像头推理分支</p><p>每个分支下包含两个模型推理分支，分别由modelnum&lt;11和modelnum&lt;13两个分支控制。modelnum&lt;11分支控制分类、检测推理过程，modelnum&lt;13控制分割推理流程，如图7-7、7-8所示。</p><p><img src="http://photos.100ask.net/canaan-docs/image-20240522175608104.png" alt="image-20240522175608104"></p><p>图7-7 分类检测推理过程</p><p><img src="http://photos.100ask.net/canaan-docs/image-20240522175619776.png" alt="img"></p><p>图7-8 分割推理过程</p><p>如果是摄像头推理，需要用户开启两个线程来进行推理，分别是显示线程和推理线程，如图7-9所示。</p><p><img src="http://photos.100ask.net/canaan-docs/image-20240522175648672.png" alt="image-20240522175648672"></p><p>图7-9 摄像头推理</p><p>在摄像头推理过程，用户需要的线程函数为display_worker、ai_worker_od以及ai_worker_seg。display_worker负责屏幕内容的显示刷新，ai_worker_od负责图像分类、目标检测推理，ai_worker_seg负责语义分割推理。线程函数的具体内容用户可以参考main.cpp中的封装。</p>`,41),n=[p];function r(i,s){return t(),d("div",null,n)}const m=e(o,[["render",r],["__file","08-ChipSideDeploymentModel.html.vue"]]);export{m as default};
